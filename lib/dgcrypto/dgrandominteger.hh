#pragma once

#include <gmp.h>
#include <gmpxx.h>

#include <iosfwd>
#include <cassert>
#include <random>

#include "dginteger.hh"

namespace DG {
namespace Crypto {
class RandomInteger : public Integer {
  // RandomInteger is a random number of size k bits
  // the value is generated by gmp
 public:
  // disable default constructor
  RandomInteger() = delete;
  // create random integer with ~k bits, use default random algorithm (marsenne
  // twister)
  RandomInteger(mp_bitcnt_t k)
      : Integer{0_mpz}, bits_{k}, gmp_rand_alg_{gmp_randinit_default} {
    // seed gmp_rand_alg_ with a uint from random_device
    gmp_rand_alg_.seed(std::random_device{}());
    // set value
    value_ = generate_integer(k);
  }

  // get number of bits
  mp_bitcnt_t bits() const { return bits_; }

  // returns the maximum number this object can hold
  const mpz_class max_size() const;

 protected:
  //// private member variables
  // number of bits (mp_bitcnt_t is an unsigned long int)
  mp_bitcnt_t bits_;
  // GNU MP random algorithm
  gmp_randclass gmp_rand_alg_;

  //// private helper functions
  // set number of bits
  void bits(mp_bitcnt_t bits) { bits_ = bits; }

  // set value_ to integer of k bits
  mpz_class generate_integer(mp_bitcnt_t k);

  //// friend non-member functions
  // stream extraction
  friend std::ostream& operator<<(std::ostream& os,
                                  const RandomInteger& random_integer);
  // stream insertion
  friend std::istream& operator>>(std::istream& is,
                                  RandomInteger& random_integer);
};
}
}

//// aliases
// namespace alias
namespace dgcrypto = DG::Crypto;
// type alias
using dgrint = DG::Crypto::RandomInteger;
